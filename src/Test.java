
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Mourad
 */
public class Test extends javax.swing.JFrame {
    private int nbCases=14;
    private Graphics g;
    private int largeurCase;
    private int longueurCase;
    /**
     * Creates new form Test
     */
    public Test() {
        initComponents();
        JLabel photo;
        photo=new JLabel();
        ImageIcon img;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        boite = new javax.swing.JPanel();
        Click = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setMinimumSize(new java.awt.Dimension(50, 50));

        boite.setBorder(javax.swing.BorderFactory.createTitledBorder("Songo"));
        boite.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boiteMouseClicked(evt);
            }
        });
        boite.setLayout(new java.awt.GridLayout(2, 7, 2, 2));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(boite, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(Click, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(boite, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Click, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void paint(Graphics gr){
        super.paint(gr);
        Case c;
        
        if(boite.getComponentCount()!=14){
        for (int i =0; i<nbCases; i++){
            c =new Case();
            largeurCase=c.getWidth();
            longueurCase=c.getHeight();
            boite.add(c);
            c.setNumCase(i+1);
            if(c.getNumCase()<=7){
                c.setLigneCase(1);
            }else{
                c.setLigneCase(2);
            }
            c.dessinerPionsCase(gr);
        }
        
        
        System.out.println("boite.getComponentCount............"+boite.getComponentCount());
    }
    
    
    }
    
    private void boiteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boiteMouseClicked
        // TODO add your handling code here:
        Point p = evt.getPoint();
        int i=0;
        double x=p.getX(), y=p.getY();
        
        Case c;
        Component comp = boite.getComponentAt(p);
        c = (Case) comp;
        int n=c.getNumCase();
        int nbPionsC=c.getNbPionsCase();
        Click.setText(""+n);
        
        distribuer(c);
        
        
    }//GEN-LAST:event_boiteMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater( new Runnable() {
            public void run() {
                new Test().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Click;
    private javax.swing.JPanel boite;
    // End of variables declaration//GEN-END:variables
    
    private void distribuerGaucheDroite(Case c, int nbPionsADistribuer, Boolean onlyLeft){
			Component toutesLesCases[]=new Component[14];
			toutesLesCases=boite.getComponents();
			Case gauche[] = new Case[7];
                        Case  droite[] = new Case[7];
			Case tmp= new Case();
			int numC=c.getNumCase();
			int nbPionsRestants;
			int i=0, j=0;
                        for(i = 0;i<=6;i++){
                            gauche[i] = (Case)toutesLesCases[i];
                        }
                        for(i=7; i<toutesLesCases.length; i++){
                            droite[j]=(Case)toutesLesCases[i];
                            j++;
                        }
			if(nbPionsADistribuer>0){
					
					int x=toutesLesCases.length;
					j=0;
					
					nbPionsRestants = numC + nbPionsADistribuer - 7;
					if((numC + nbPionsADistribuer>7)){
						for(i=numC; i<gauche.length; i++){
                                                    if(nbPionsADistribuer>0){
							tmp = (Case)gauche[i];
							tmp.setNbPions(tmp.getNbPionsCase()+1);
							gauche[i]=tmp;
                                                        nbPionsADistribuer--;
                                                    }
						}
						
                                                System.out.println(""+droite[6].getNumCase());
						distribuerDroiteGauche((Case)droite[6],nbPionsRestants);
                                                System.out.println("Case No:"+droite[0].getNumCase()+"----->"+nbPionsRestants+" pions restants.");
					}else{
                                            if(!onlyLeft){
						for(i=numC-1; i<7; i++){
                                                    if(gauche[i]==c){
                                                            distribuerCoteDroitseulement(droite[6], nbPionsADistribuer, true);
                                                            break;
                                                        }
                                                        if(nbPionsADistribuer!=0){
							tmp = (Case)gauche[i];
							tmp.setNbPions(tmp.getNbPionsCase()+1);
							gauche[i]=tmp;
                                                        nbPionsADistribuer--;
                                                        }
                                                        
                                                }
                                                        
                                            }else{
                                                for(i=numC; i<7; i++){
                                                    if(gauche[i]==c){
                                                            distribuerCoteDroitseulement(droite[0], nbPionsADistribuer, true);
                                                            break;
                                                        }
                                                        if(nbPionsADistribuer!=0){
							tmp = (Case)gauche[i];
							tmp.setNbPions(tmp.getNbPionsCase()+1);
							gauche[i]=tmp;
                                                        nbPionsADistribuer--;
                                                        }
                                                        
                                                }
                                            }
					}
			}	
    }
    
    private void distribuerDroiteGauche(Case c, int nbPionsADistribuer){
			Component toutesLesCases[]=new Component[14];
			toutesLesCases=boite.getComponents();
                        Case gauche[] = new Case[7];
                        Case  droite[] = new Case[7];
			Case tmp= new Case();
			int numC=c.getNumCase();
			int nbPionsRestants;
			int i=0, j=0;
                        for(i = 0;i<=6;i++){
                            gauche[i] = (Case)toutesLesCases[i];
                        }
                        for(i=7; i<toutesLesCases.length; i++){
                            droite[j]=(Case)toutesLesCases[i];
                            j++;
                        }
			if(nbPionsADistribuer>0){
					//On renverse l'ordre des elements
					int x=toutesLesCases.length;
					j=0;
					
					nbPionsRestants = nbPionsADistribuer - (numC - 8);
					if((numC - nbPionsADistribuer) <=8){
						for(i=numC; i>=8; i--){
                                                    if(nbPionsADistribuer>0){
                                                        if(droite[i-8]==c){
                                                            distribuerCoteGaucheseulement(gauche[0], nbPionsADistribuer, false);
                                                        }else{
                                                        tmp = (Case)droite[i-8];
							tmp.setNbPions(tmp.getNbPionsCase()+1);
							droite[i-8]=tmp;
                                                        nbPionsADistribuer--;
                                                    }
                                                   }
							
						}
						if((numC+nbPionsRestants)>7){
                                                    distribuerGaucheDroite((Case)gauche[0],nbPionsRestants, false);
                                                    System.out.println("Case No(gauche0):"+gauche[0].getNumCase()+"----->"+nbPionsRestants+" pions restants.");
                                                }else{
                                                    distribuerGaucheDroite((Case)gauche[0],nbPionsRestants, true);
                                                }
					}else{
						for(i=numC; i>=8; i--){
                                                    if(gauche[i]==c){
                                                            distribuerCoteGaucheseulement(gauche[0], nbPionsADistribuer, true);
                                                            break;
                                                        }
                                                    if(nbPionsADistribuer>0){
							tmp = (Case)droite[i-8];
							tmp.setNbPions(tmp.getNbPionsCase()+1);
							droite[i-8]=tmp;
                                                        nbPionsADistribuer--;
                                                        }
                                                    
						}
					}
			}
    }
    
    
    private void distribuer(Case c) {
        Component ToutesLesCases[]= new Case [14];
        ToutesLesCases=boite.getComponents();
        int i=0, j=0, numCase, nbPionsC, x=ToutesLesCases.length;
        Case tmp;
        numCase=c.getNumCase();
        nbPionsC=c.getNbPionsCase();
        for(i=0;i<ToutesLesCases.length;i++){
            tmp=(Case)ToutesLesCases[i];
            System.out.println(tmp.getNumCase());
        }
        if(c.getLigneCase()==1){//Si c est dans la ligne 1
            System.out.println(c.getLigneCase());
            if((c.getNumCase() + nbPionsC>7)){
            distribuerGaucheDroite(c, nbPionsC, false);
            }else{
                distribuerGaucheDroite(c, nbPionsC, true);
            }
        }else{//Si c est dans la ligne 2
            distribuerDroiteGauche(c, nbPionsC);
        }
        
        //On met le nombre de pions de la case choisie à zéro et on repaint le plateau de jeu
        c.setNbPions(0);
        repaint();
    }

    private void distribuerCoteDroitseulement(Case c, int nbPionsADistribuer, boolean onlyRight) {
        Component toutesLesCases[]=new Component[14];
			toutesLesCases=boite.getComponents();
                        Case gauche[] = new Case[7];
                        Case  droite[] = new Case[7];
			Case tmp= new Case();
			int numC=c.getNumCase();
			int nbPionsRestants;
			int i=0, j=0;
                        for(i = 0;i<=6;i++){
                            gauche[i] = (Case)toutesLesCases[i];
                        }
                        for(i=7; i<toutesLesCases.length; i++){
                            droite[j]=(Case)toutesLesCases[i];
                            j++;
                        }
			
                        for(i=numC; i>=8; i--){
                            if(droite[i-8]==c){
                                distribuerCoteGaucheseulement(gauche[0], nbPionsADistribuer, true);
                                break;
                            }
                                                    if(nbPionsADistribuer>0){
							tmp = (Case)droite[i-8];
							tmp.setNbPions(tmp.getNbPionsCase()+1);
							droite[i-8]=tmp;
                                                        nbPionsADistribuer--;
                                                        }
                                                    
						}
    }

    private void distribuerCoteGaucheseulement(Case c, int nbPionsADistribuer, boolean onlyLeft) {
        Component toutesLesCases[]=new Component[14];
			toutesLesCases=boite.getComponents();
                        Case gauche[] = new Case[7];
                        Case  droite[] = new Case[7];
			Case tmp= new Case();
			int numC=c.getNumCase();
			int nbPionsRestants;
			int i=0, j=0;
                        for(i = 0;i<=6;i++){
                            gauche[i] = (Case)toutesLesCases[i];
                        }
                        for(i=7; i<toutesLesCases.length; i++){
                            droite[j]=(Case)toutesLesCases[i];
                            j++;
                        }
		
        for(i=numC-1; i<7; i++){
                                                        if(nbPionsADistribuer!=0){
							tmp = (Case)gauche[i];
							tmp.setNbPions(tmp.getNbPionsCase()+1);
							gauche[i]=tmp;
                                                        nbPionsADistribuer--;
                                                        }
                                                        if(gauche[i]==c){
                                                            distribuerCoteDroitseulement(droite[6], nbPionsADistribuer+1, true);
                                                            break;
                                                        }
                                                }
    }
    
    
}

